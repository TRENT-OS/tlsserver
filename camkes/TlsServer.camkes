/*
 * Copyright (C) 2020, Hensoldt Cyber GmbH
 */

/*
 *  TlsServer CAmkES Component
 *
 *  to be used as:
 *
 *      #include "TlsServer/camkes/TlsServer.camkes"
 *
 *      TlsServer_COMPONENT_DEFINE(TlsServer)
 *
 */

#pragma once

import <std_connector.camkes>;
import <if_OS_Socket.camkes>;
import <if_OS_Entropy.camkes>;

import <TlsServer/camkes/if_TlsServer.camkes>;

struct TlsServer_Config {
    string trustedCert;
}

//------------------------------------------------------------------------------


/*
 * Declare the TlsServer with a given type name:
 *
 *      TlsServer_COMPONENT_DEFINE(
 *          <name>
 *      )
 */
#define TlsServer_COMPONENT_DEFINE( \
    _name_) \
    \
    component _name_ { \
        dataport    Buf                     network_stack_dp; \
        uses        if_OS_Socket            network_stack_rpc; \
        \
        provides    if_TlsServer            tlsServer_rpc; \
        dataport    Buf                     tlsServer_port; \
        \
        dataport    Buf                     entropy_port; \
        uses        if_OS_Entropy           entropy_rpc; \
        \
        attribute   TlsServer_Config        tlsServer_config; \
    }


//------------------------------------------------------------------------------


/*
 * Assign all the non-client interfaces:
 *
 *      TlsServer_INSTANCE_CONNECT(
 *          <instance>,
 *          <entropy>.<rpc>, <entrop>.<port>,
 *          <network>.<rpc>, <network>.<port>, <network>.<evt>
 *      )
 */
#define TlsServer_INSTANCE_CONNECT( \
    _inst_, \
    _entropy_rpc_, \
    _entropy_port_, \
    _nw_rpc_, \
    _nw_port_) \
    \
    connection  seL4RPCCall \
        _inst_ ## _entropy_rpc( \
            from    _inst_.entropy_rpc, \
            to      _entropy_rpc_ \
        ); \
    connection seL4SharedData \
        _inst_ ## _entropy_port( \
            from    _inst_.entropy_port, \
            to      _entropy_port_ \
        ); \
    connection  seL4RPCCall \
        _inst_ ## _nw_rpc( \
            from    _inst_.network_stack_rpc, \
            to      _nw_rpc_ \
        ); \
    connection seL4SharedData \
        _inst_ ## _nw_port( \
            from    _inst_.network_stack_dp, \
            to      _nw_port_ \
        ); \


//------------------------------------------------------------------------------


/*
 * Assign single client via this macro:
 *
 *      TlsServer_INSTANCE_CONNECT_CLIENT(
 *          <instance>,
 *          <client>.<rpc>, <client>.<port>
 *      )
 *
 */
#define TlsServer_INSTANCE_CONNECT_CLIENT( \
    _inst_, \
    _rpc_, \
    _port_) \
    \
    connection seL4RPCCall \
        _inst_ ## _tlsServer_rpc( \
            from    _rpc_, \
            to      _inst_.tlsServer_rpc \
        ); \
    connection seL4SharedData \
        _inst_ ## _tlsServer_port( \
            from    _port_, \
            to      _inst_.tlsServer_port \
        );


//------------------------------------------------------------------------------


/*
 * Configure the trusted root certificate used by the TlsServer:
 *
 *      TlsServer_INSTANCE_CONFIGURE(
 *          <instance>,
 *          <cert>
 *      )
 *
 */
#define TlsServer_INSTANCE_CONFIGURE( \
    _inst_, \
    _cert_) \
    \
    _inst_.tlsServer_config = { \
        "trustedCert" : _cert_ \
    };


//------------------------------------------------------------------------------


// Assign a single badge; this is used internally
#define TlsServer_BADGE_ASSIGNER( \
    _unused0_, \
    _unused1_, \
    _rpc_, \
    _num_) \
    \
    _rpc_ ## _attributes = (100 + _num_);


/*
 * Assign a badge to the connected client:
 *
 *      TlsServer_CLIENT_ASSIGN_BADGE(
 *          <client_rpc>, <ID>
 *      )
 *
 * NOTE: IDs need to start at 101!
 *
 */
#define TlsServer_CLIENT_ASSIGN_BADGE( \
    _rpc_, \
    _val_) \
    \
    _rpc_ ## _attributes = _val_;


/*
 * Assign badges to a list of clients; badge IDs will start at 101 and then be
 * incremented.
 *
 *      TlsServer_CLIENT_ASSIGN_BADGES(
 *          <client_rpc>,
 *      )
 *
 * NOTE: TlsServer can take only ONE client at the moment!
 *
 */
#define TlsServer_CLIENT_ASSIGN_BADGES( \
    ...) \
    \
    FOR_EACH_1P(TlsServer_BADGE_ASSIGNER,UNUSED,UNUSED,__VA_ARGS__)
