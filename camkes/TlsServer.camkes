/*
 * Copyright (C) 2020-2021, HENSOLDT Cyber GmbH
 */

/*
 *  TlsServer CAmkES Component
 *
 *  to be used as:
 *
 *      #include "TlsServer/camkes/TlsServer.camkes"
 *
 *      TlsServer_COMPONENT_DEFINE(TlsServer)
 *
 */

#pragma once

import <std_connector.camkes>;
import <if_OS_Entropy.camkes>;

#include "if_OS_Socket.camkes"
#include "TlsServer/camkes/if_TlsServer.camkes"

struct TlsServer_Config {
    string caCerts;
    string ownCert;
    string privateKey;
}

//------------------------------------------------------------------------------


/*
 * Declare the TlsServer with a given type name:
 *
 *      TlsServer_COMPONENT_DEFINE(
 *          <name>
 *      )
 */
#define TlsServer_COMPONENT_DEFINE( \
    _name_) \
    \
    component _name_ { \
        control; \
        \
        IF_OS_SOCKET_USE(networkStack)  \
        \
        IF_TLSSERVER_PROVIDE(tlsServer) \
        \
        dataport    Buf                     entropy_port; \
        uses        if_OS_Entropy           entropy_rpc; \
        \
        attribute   TlsServer_Config        tlsServer_config; \
    }

//------------------------------------------------------------------------------


 /*
 * Connects a variable number of client components to the if_TlsServer interface
 * of a TlsServer instance.
 *
 * @param[in] inst Name of the TlsServer component instance.
 * @param[in] ...  List of client user component instance names and the prefix
 *                 used to generate a unique name for the connectors used in
 *                 IF_TLSSERVER_USE() and that should be connected with the
 *                 tlsServer instance specified earlier. To connect several
 *                 user components at once follow the pattern of:
 *                 <inst_user1>, <inst_user1_prefix_if_tlsServer>,
 *                 <inst_user2>, <inst_user2_prefix_if_tlsServer>,
 *                 ...
 */
#define TlsServer_INSTANCE_CONNECT_CLIENTS( \
    inst, \
    ...) \
    \
    FOR_EACH_2P(IF_TLSSERVER_CONNECT, \
                inst, \
                tlsServer, \
                __VA_ARGS__)

//------------------------------------------------------------------------------


/*
 * Configure the trusted root certificate used by the TlsServer:
 *
 *      TlsServer_INSTANCE_CONFIGURE(
 *          <instance>,
 *          <caCerts>,
 *          <ownCert>,
 *          <privateKey>
 *      )
 *
 */
#define TlsServer_INSTANCE_CONFIGURE( \
    _inst_, \
    _caCerts_, \
    _ownCert_, \
    _privateKey) \
    \
    _inst_.tlsServer_config = { \
        "caCerts" : _caCerts_, \
        "ownCert" : _ownCert_, \
        "privateKey" : _privateKey \
    };


//------------------------------------------------------------------------------


/*
 * Assign a single badge.
 *
 * This is used internally.
 */
#define TlsServer_BADGE_ASSIGNER( \
    _unused0_, \
    _unused1_, \
    _inst_user_, \
    _inst_user_field_prefix_, \
    _num_) \
    \
    _inst_user_._inst_user_field_prefix_ ## _rpc_attributes = (100 + _num_);


/*
 * Assign a badge to the connected client:
 *
 *      TlsServer_CLIENT_ASSIGN_BADGE(
 *          <client_rpc>, <ID>
 *      )
 *
 * NOTE: IDs need to start at 101!
 *
 * This is used internally.
 */
#define TlsServer_CLIENT_ASSIGN_BADGE( \
    _client_, \
    _prefix_, \
    _val_) \
    \
    _client_._prefix_ ## _attributes = _val_;


 /*
 * Assign badges to a list of clients; badge IDs will start at 101 and then be
 * incremented.
 *
 *      TlsServer_CLIENT_ASSIGN_BADGES(
 *          <inst_user1>, <inst_user1_prefix_if_tlsServer>,
 *          <inst_user2>, <inst_user2_prefix_if_tlsServer>,
 *           ...
 *      )
 *
 * NOTE: TlsServer can take up to 8 clients at the moment!
 *
 */
#define TlsServer_CLIENT_ASSIGN_BADGES( \
    ...) \
    \
    FOR_EACH_2P(TlsServer_BADGE_ASSIGNER,UNUSED,UNUSED,__VA_ARGS__)
